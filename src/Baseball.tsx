/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: NintendObi-Wan (https://sketchfab.com/NOW3D)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/8k-realistic-baseball-by-polyhaven-1a7346e0575149abab9fac3184dc94c3
title: 8K Realistic Baseball (By Polyhaven)
*/

import * as THREE from 'three'
import React, { useRef, useContext, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { BaseballContext } from './BaseballContext'

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.Mesh
  }
  materials: {
    baseball_01: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/baseball.glb') as GLTFResult
  const { pitch, isRightHandedPitcher } = useContext(BaseballContext);

  const handle4SeamFastballRotation = () => {
    group.current?.rotateZ(isRightHandedPitcher ? -.15 : .15);
  }

  const handle2SeamFastballRotation = () => {
    group.current?.rotateX(-.15);
  }

  const handleCurveballRotation = () => {
    group.current?.rotateZ(isRightHandedPitcher ? .1 : -.1);
  }

  const handleSliderRotation = () => {
    group.current?.rotateZ(.2)
  }

  useEffect(() => {
    if(pitch) {
      group.current?.rotation.set(0,0,0);
      const rotate45Deg = Math.PI/180 * 45;
      const rotate90Deg = Math.PI/180 * 90;
      if(pitch === '2_SEAM_FASTBALL' || pitch === 'SLIDER') {
        group.current?.rotateZ(isRightHandedPitcher ? rotate45Deg: -rotate45Deg);
      } else if(pitch === '4_SEAM_FASTBALL' || pitch === 'CURVEBALL') {
        group.current?.rotateZ(isRightHandedPitcher? rotate45Deg: -rotate45Deg);
        group.current?.rotateY(isRightHandedPitcher? rotate90Deg: -rotate90Deg);
      }
    } 
  }, [pitch, isRightHandedPitcher])

  useFrame((state, delta) => {
    if(pitch === '4_SEAM_FASTBALL') {
      handle4SeamFastballRotation();
    } else if(pitch === '2_SEAM_FASTBALL') {
      handle2SeamFastballRotation();
    } else if(pitch === 'CURVEBALL') {
      handleCurveballRotation();
    } else if(pitch === 'SLIDER') {
      handleSliderRotation();
    }
  });
  return (
    <group ref={group} {...props} dispose={null}>
          <mesh geometry={nodes.mesh_0.geometry} material={materials.baseball_01} />
    </group>
  )
}

useGLTF.preload('/baseball.glb')